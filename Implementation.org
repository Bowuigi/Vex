* Include chain

1) dyst.h (my single header dynamic array library)
2) globals.h (includes structs)
3) hfn.c (helper functions)
4) keyfuncs.c (for keybindings)
5) config.h (exactly that)
6) main.c (the most important file)

* Dependencies

+ https://github.com/tomas/termbox for TUI
+ C standard stuff like *string*, *stdio*, etc.

* Searching

The searching will be done with a call to ~strstr()~ on every single file on the list and showing the required ones, getting *O(n)* searching time

* Key handling

Keys will be handled in a simple loop, where the key pressed gets compared to every keybinding on config.h, getting *O(n)* key handling too.
This makes it very easy to add and change keybindings.

After getting the pressed key:

#+begin_src C
int i=0;
for (i=0; i<KEYS_LEN; i++) {
	if (c==keys[i].keycode)
		keys[i].trigger(s);
}
#+end_src

Defining keybindings would be as simple as

#+begin_src C
const key keys[] {
	...
	{ .keycode = 'k', .trigger = keyfunc },
	...
}

#define KEYS_LEN sizeof(keys)-sizeof(keys[0])
#+end_src

* Structs

#+begin_src C
struct f_info {
    char name[NAME_MAX];
    char properties[20]; // "rwx directory 9999GB"
};

struct state {
    int cursor_y;
    int scroll_y;
    char directory[NAME_MAX];
    char path[PATH_MAX];
    f_info *files;
};

struct keybind {
    int keycode;
    void (*trigger)(struct state s);
};
#+end_src
