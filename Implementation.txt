Include chain

globals.h (includes structs) <- hfn.c (helper functions) <- keyfuncs.c (for keybindings) <- config.h (exactly that) <- main.c (the most important file)

Dependencies

https://github.com/tomas/termbox for TUI
C standard stuff like string, stdio, etc.

Searching

The searching will be done with a call to strstr() on every single file on the list and showing the required ones, getting O(n) searching time

Key handling

Keys will be handled in a simple loop, where the key pressed gets compared to every keybinding on config.h, getting O(n) key handling too
This makes it very easy to add and change keybindings.

After getting the pressed key:

int i=0;
for (i=0; i<KEYS_LEN; i++) {
	if (c==keys[i].keycode)
		keys[i].trigger(s);
	}
}

Structs

For each file there will be a struct of type f_info, which is:

typedef struct {
	char name[256];
	char properties[23];
} f_info;

typedef struct {
	int keycode;
	void (*trigger)(state s);
} key;

typedef struct {
	int sy;
	int cy;
	char directory[PATH_MAX];
	f_info files[MAX_OPTIONS];
} state;

Defining keybindings would be as simple as

key keys[] {
	...
	{ .keycode = 'k', .trigger = keyfunc },
	...
}

#define KEYS_LEN sizeof(keys)-sizeof(keys[0])
